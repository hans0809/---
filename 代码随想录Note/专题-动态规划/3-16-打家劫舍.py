# 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，
# 影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，
# 如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

# 给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

# 示例 1： 输入：[1,2,3,1] 输出：4 解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。   偷窃到的最高金额 = 1 + 3 = 4 。

# 示例 2： 输入：[2,7,9,3,1] 输出：12 解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。   偷窃到的最高金额 = 2 + 9 + 1 = 12 。

class Solution:
    def rob(self, nums: List[int]) -> int:
        
        if not nums:
            return 0
        if len(nums)==1:
            return nums[0]

        n=len(nums)# 一共可偷的房间数

        #dp[i]： 只考虑偷前i家，能够偷到的最高金额
        dp=[0 for _ in range(n)]

        # 初始化：
        dp[0]=nums[0]
        dp[1]=max(nums[0],nums[1])

        for i in range(2,n):
            # 前i-1家已经搞定，考虑第i家：
            # 1.决定不偷第i家（只能考虑偷到第i-1家）
            # 2.决定偷第i家(不能偷第i-1家，那么只能偷到第i-2家，总金额再加上偷到的第i家的金额)
            dp[i]=max(dp[i-1],dp[i-2]+nums[i])
        return dp[n-1]
# 给定一个整数数组 prices，其中第 i 个元素代表了第 i 天的股票价格 ；非负整数 fee 代表了交易股票的手续费用。

# 你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。

# 返回获得利润的最大值。

# 注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。

# 示例 1: 输入: prices = [1, 3, 2, 8, 4, 9], fee = 2 输出: 8

# 解释: 能够达到的最大利润: 在此处买入 prices[0] = 1 在此处卖出 prices[3] = 8 在此处买入 prices[4] = 4 在此处卖出 prices[5] = 9 总利润: ((8 - 1) - 2) + ((9 - 4) - 2) = 8.

# 相比(II), 多了手续费

class Solution:
    def maxProfit(self, prices: List[int], fee: int) -> int:
        n=len(prices)# 天数

        #dp[i][0]：第i天持有股票所获得的最大收益
        #dp[i][1]：第i天不持有股票能够获得的最大收益
        dp=[[0 for _ in range(2)] for _ in range(n)]

        # 初始化
        # 第0天，持有股票的收益就是-prices[0]
        dp[0][0]=-prices[0]
        # 第0天，不持有股票的最大收益是0
        dp[0][1]=0

        for i in range(1,n):
            # 计算第i天持有股票的最大收益: 有两种情况
            # 1. 第i-1天就持有股票：dp[i][0]=dp[i-1][0]
            # 2. 第i-1天不持有股票，第i天买入股票：dp[i][0]=dp[i-1][1]-prices[i]
            # 和I不同，这里的第2种情况需要加上dp[i-1][1]，即第i-1天不持有股票的最大收益，因为在I中，股票全程只能买卖一次
            dp[i][0]=max(dp[i-1][0],dp[i-1][1]-prices[i])
            

            # 计算第i天不持有股票的最大收益: 有两种情况
            # 1. 第i-1天就不持有股票：dp[i][1]=dp[i-1][1]
            # 2. 第i-1天持有股票，在第i天卖出了，注意本题需要扣除手续费：dp[i][1]=prices[i]+dp[i-1][0]-fee
            dp[i][1]=max(dp[i-1][1],prices[i]+dp[i-1][0]-fee)
        return dp[n-1][1]
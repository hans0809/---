# 给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。

# 子序列是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。

# 示例 1： 输入：nums = [10,9,2,5,3,7,101,18] 输出：4 解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。

# 示例 2： 输入：nums = [0,1,0,3,2,3] 输出：4

# 示例 3： 输入：nums = [7,7,7,7,7,7,7] 输出：1

class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        n=len(nums)# 元素个数

        # dp[i]：前i个元素组成的子数组中，最长严格递增子序列的长度是dp[i]
        # 初始时，单独一个元素的严格递增子序列的长度是1
        dp=[1 for _ in range(n)]

        for i in range(1,n):
            for j in range(0,i):
                # 求dp[i]:
                # dp[i]可由前i-1个位置得到，具体地，取dp[0...i-1]中的最大值，这可以由·j遍历0到i-1位置得到
                # 然后再同原来的dp[i]比较取较大值
                if nums[i]>nums[j]:
                    dp[i]=max(dp[i],dp[j]+1)
        return max(dp)
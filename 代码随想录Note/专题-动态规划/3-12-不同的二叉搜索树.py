# 给你一个整数 n ，求恰由 n 个节点组成且节点值从 1 到 n 互不相同的 二叉搜索树 有多少种？返回满足题意的二叉搜索树的种数。

# 思路：以i为头节点的二叉搜索树，左子树的取值是[1...i-1]，右子树的取值是[i+1...n]，

# dp[3]，就是 元素1为头结点搜索树的数量 + 元素2为头结点搜索树的数量 + 元素3为头结点搜索树的数量

# 元素1为头结点搜索树的数量 = 右子树有2个元素的搜索树数量 * 左子树有0个元素的搜索树数量

# 元素2为头结点搜索树的数量 = 右子树有1个元素的搜索树数量 * 左子树有1个元素的搜索树数量

# 元素3为头结点搜索树的数量 = 右子树有0个元素的搜索树数量 * 左子树有2个元素的搜索树数量

# 有2个元素的搜索树数量就是dp[2]。

# 有1个元素的搜索树数量就是dp[1]。

# 有0个元素的搜索树数量就是dp[0]。

# 所以dp[3] = dp[2] * dp[0] + dp[1] * dp[1] + dp[0] * dp[2]

class Solution:
    def numTrees(self, n: int) -> int:
        # dp[i]: 以i为根节点的不同二叉搜索树的个数
        dp=[0 for _ in range(n+1)]

        dp[0]=1
        dp[1]=1
        for i in range(2,n+1):
            for j in range(1,i+1):
                dp[i]+=dp[j-1]*dp[i-j]
        
        return dp[n]
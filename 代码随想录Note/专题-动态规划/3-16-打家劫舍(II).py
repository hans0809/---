# 你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 围成一圈 ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警 。

# 给定一个代表每个房屋存放金额的非负整数数组，计算你 在不触动警报装置的情况下 ，能够偷窃到的最高金额。

# 示例 1：

# 输入：nums = [2,3,2] 输出：3 解释：你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。

# 示例 2： 输入：nums = [1,2,3,1] 输出：4 解释：你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。偷窃到的最高金额 = 1 + 3 = 4 。

# 示例 3： 输入：nums = [0] 输出：0


# 之前的打家劫舍是排成一列的房子，而本题的房子围成了一个环，因此需要考虑首尾
# 假设房子编号为1到n
# 1. 不偷第1间，那么可偷的房间号是2...n
# 2. 不偷第n间，那么可偷的房间号是1...n-1
# 分别对以上两种情况执行之前的打家劫舍逻辑，然后取两者结果中较大的那个就是本题的最终答案
class Solution:
    def rob(self, nums: List[int]) -> int:
        if not nums:
            return 0
        if len(nums)==1:
            return nums[0]

        # 打家劫舍的原本逻辑
        def run_rob(sub_nums):
            
            if not sub_nums:
                return 0
            if len(sub_nums)==1:
                return sub_nums[0]

            n=len(sub_nums)# 一共可偷的房间数

            #dp[i]： 只考虑偷前i家，能够偷到的最高金额
            dp=[0 for _ in range(n)]

            # 初始化：
            dp[0]=sub_nums[0]
            dp[1]=max(sub_nums[0],sub_nums[1])

            for i in range(2,n):
                # 前i-1家已经搞定，考虑第i家：
                # 1.决定不偷第i家（只能考虑偷到第i-1家）
                # 2.决定偷第i家(不能偷第i-1家，那么只能偷到第i-2家，总金额再加上偷到的第i家的金额)
                dp[i]=max(dp[i-1],dp[i-2]+sub_nums[i])
            return dp[n-1]
        

        
        # 情况1：不偷第1家
        result1=run_rob(nums[1:])
        # 情况2：不偷最后一家
        result2=run_rob(nums[:-1])
        return max(result1, result2)
# 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

# 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

# 注意：给定 n 是一个正整数。

class Solution:
    def climbStairs(self, n: int) -> int:
        if n==1:
            return n
        # dp[i]: 爬到第i层总的方法数为dp[i]
        dp=[0 for i in range(n+1)]
        # 初始化,不用考虑dp[0]，因为n是正整数
        dp[1]=1# 爬到第一层只有一种方法
        dp[2]=2# 爬到第二层，可以直接一步跨两层，也可以走两步，所以有两种方法
        # 列递推式：如果想要到达第i层，由于每次只能走一步或者两步，因此到达第i层时只有两种可能：从第i-1层走一步，或者从第i-2层走两步，若是前者，则dp[i]=dp[i-1]，因为从第i-1层道第i层只能走一步到达，就这一种方法，因此走到第i层的方法 dp[i]就等于走到第i-1层的方法数dp[i-1]，后者同理
        for i in range(3,n+1):
            dp[i]=dp[i-1]+dp[i-2]
        return dp[n]

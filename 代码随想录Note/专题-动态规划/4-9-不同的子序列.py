# # 给定一个字符串 s 和一个字符串 t ，计算在 s 的子序列中 t 出现的个数。

# 确定dp数组（dp table）以及下标的含义
# dp[i][j]：以i-1为结尾的s子序列中出现以j-1为结尾的t的个数为dp[i][j]。

# 确定递推公式
# 这一类问题，基本是要分析两种情况

# s[i - 1] 与 t[j - 1]相等
# s[i - 1] 与 t[j - 1] 不相等
# 当s[i - 1] 与 t[j - 1]相等时，dp[i][j]可以有两部分组成。

# 一部分是用s[i - 1]来匹配，那么个数为dp[i - 1][j - 1]。

# 一部分是不用s[i - 1]来匹配，个数为dp[i - 1][j]。

# 用s[i-1]来匹配时，s[i-1]与t[j-1]匹配了，
# 即不需要考虑当前s子串和t子串的最后一位字母，所以只需要 dp[i-1][j-1]

# 这里可能有同学不明白了，为什么还要考虑 不用s[i - 1]来匹配，都相同了指定要匹配啊。

# 例如： s：bagg 和 t：bag ，s[3] 和 t[2]是相同的，但是字符串s也可以不用s[3]来匹配，即用s[0]s[1]s[2]组成的bag。

# 当然也可以用s[3]来匹配，即：s[0]s[1]s[3]组成的bag。

# 所以当s[i - 1] 与 t[j - 1]相等时，dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];

# 当s[i - 1] 与 t[j - 1]不相等时，dp[i][j]只有一部分组成，不用s[i - 1]来匹配，即：dp[i - 1][j]

# 所以递推公式为：dp[i][j] = dp[i - 1][j];

# dp数组如何初始化
# 从递推公式dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]; 和 dp[i][j] = dp[i - 1][j]; 中可以看出dp[i][0] 和dp[0][j]是一定要初始化的。

# 每次当初始化的时候，都要回顾一下dp[i][j]的定义，不要凭感觉初始化。

# dp[i][0]表示什么呢？

# dp[i][0] 表示：以i-1为结尾的s可以随便删除元素，出现空字符串的个数。

# 那么dp[i][0]一定都是1，因为也就是把以i-1为结尾的s，删除所有元素，出现空字符串的个数就是1。

# 再来看dp[0][j]，dp[0][j]：空字符串s可以随便删除元素，出现以j-1为结尾的字符串t的个数。

# 那么dp[0][j]一定都是0，s如论如何也变成不了t。

# 最后就要看一个特殊位置了，即：dp[0][0] 应该是多少。

# dp[0][0]应该是1，空字符串s，可以删除0个元素，变成空字符串t。


class Solution:
    def numDistinct(self, s: str, t: str) -> int:
        lens,lent=len(s),len(t)
        #dp[i][j]: s[0...i-1]中出现t[0...j-1]的次数
        dp=[[0 for _ in range(lent+1)] for _ in range(lens+1)]

        # 初始化
        dp[0][0]=1# s和t都空时,啥也不用做就满足题意,且只有一次
        for i in range(1,lens):
            dp[i][0]=1#t为空时,s必须删除自身全部元素才能变得与t相同,且只有一次
        for j in range(1,lent):
            dp[0][j]=0#s为空时,无论怎么删,都不可能变得与t相同
        
        for i in range(1,lens+1):
            for j in range(1,lent+1):
                if s[i-1]==t[j-1]:
                    # 用或不用s[i-1]进行匹配,两种都可能满足题意
                    # 如果用, 那么不需要考虑当前s子串和t子串的最后一位字母，所以只需要 dp[i-1][j-1]
                    # 如果不用,那么需要考虑当前t子串的最后一位字母, 所以是dp[i-1][j]
                    dp[i][j]=dp[i-1][j-1]+dp[i-1][j]
                else:#此时s和t的子串中最后一位不相等,只能选择不用s[i-1]进行匹配
                    dp[i][j]=dp[i-1][j]
        return dp[lens][lent]
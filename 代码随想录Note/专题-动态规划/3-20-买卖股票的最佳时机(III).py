# 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。

# 设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。

# 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

# 示例 1: 输入：prices = [3,3,5,0,0,3,1,4] 输出：6 解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3。

# 示例 2： 输入：prices = [1,2,3,4,5] 输出：4 解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4。注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。

# 示例 3： 输入：prices = [7,6,4,3,1] 输出：0 解释：在这个情况下, 没有交易完成, 所以最大利润为0。

# 示例 4： 输入：prices = [1] 输出：0



# 一天一共就有五个状态，

# 没有操作
# 第一次买入
# 第一次卖出
# 第二次买入
# 第二次卖出
# dp[i][j]中 i表示第i天，j为 [0 - 4] 五个状态，dp[i][j]表示第i天状态j所剩最大现金。

# 需要注意：dp[i][1]，表示的是第i天，买入股票的状态，并不是说一定要第i天买入股票，这是很多同学容易陷入的误区。

# 达到dp[i][1]状态，有两个具体操作：

# 操作一：第i天买入股票了，那么dp[i][1] = dp[i-1][0] - prices[i]
# 操作二：第i天没有操作，而是沿用前一天买入的状态，即：dp[i][1] = dp[i - 1][1]
# 那么dp[i][1]究竟选 dp[i-1][0] - prices[i]，还是dp[i - 1][1]呢？

# 一定是选最大的，所以 dp[i][1] = max(dp[i-1][0] - prices[i], dp[i - 1][1]);

# 同理dp[i][2]也有两个操作：

# 操作一：第i天卖出股票了，那么dp[i][2] = dp[i - 1][1] + prices[i]
# 操作二：第i天没有操作，沿用前一天卖出股票的状态，即：dp[i][2] = dp[i - 1][2]
# 所以dp[i][2] = max(dp[i - 1][1] + prices[i], dp[i - 1][2])

# 同理可推出剩下状态部分：

# dp[i][3] = max(dp[i - 1][3], dp[i - 1][2] - prices[i]);

# dp[i][4] = max(dp[i - 1][4], dp[i - 1][3] + prices[i]);


class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        n=len(prices)#天数

        # dp[i][0]：无操作 能够获得的最大收益
        # dp[i][1]：第一次买入 能够获得的最大收益
        # dp[i][2]：第一次卖出 能够获得的最大收益
        # dp[i][3]：第二次买入 能够获得的最大收益
        # dp[i][4]：第二次卖出 能够获得的最大收益
        dp=[[0 for _ in range(5)] for _ in range(n)]

        # 注意：dp[i][1]，表示的是第i天，是买入股票的状态，并不是说一定要第i天买入股票
        
        # 初始化：
        # 第0天无任何操作时，利润为0
        dp[0][0]=0
        # 第0天是第一次买入的状态时，最大利润就是-prices[0]
        dp[0][1]=-prices[0]
        # 第0天是第一次卖出的状态时，首先卖出的操作一定是收获利润，
        # 整个股票买卖最差情况也就是没有盈利即全程无操作现金为0，
        # 从递推公式中可以看出每次是取最大值，那么既然是收获利润如果比0还小了就没有必要收获这个利润了。
        dp[0][2]=0
        # 第0天是第二次买入的状态时，第二次买入依赖于第一次卖出的状态，
        # 其实相当于第0天第一次买入了，第一次卖出了，然后在买入一次（第二次买入），
        # 那么现在手头上没有现金，只要买入，现金就做相应的减少。
        dp[0][3]=-prices[0]
        # 第0天是第二次卖出时，同理最大利润是0
        dp[0][4]=0


        for i in range(1,n):
            # 第i天是无操作状态，最大利润等同于前一天无操作的状态对应的最大利润
            dp[i][0]=dp[i-1][0]
            # 第i天是第一次买入的状态，有两种情况：
            # 1.第i天第一次买入，dp[i][1]=dp[i-1][0]-prices[i]
            # 2.第i天无操作，沿用第i-1天的状态, dp[i][1]=dp[i-1][1]
            dp[i][1]=max(dp[i-1][0]-prices[i], dp[i-1][1])
            # 第i天是第一次卖出的状态，有两种情况：
            # 1. 第i天第一次卖出，dp[i][2]=dp[i-1][1]+prices[i]
            # 2. 第i-1天就处于第一次卖出的状态了，直接沿用：dp[i][2]=dp[i-1][2]
            dp[i][2]=max(dp[i-1][1]+prices[i], dp[i-1][2])
            # 第i天是第二次买入的状态，有两种情况：
            # 1. 第i天第二次买入，dp[i][3]=dp[i-1][2]-prices[i]
            # 2. 第i-1天就处于第二次买入的状态了，直接沿用：dp[i][3]=dp[i-1][3]
            dp[i][3]=max(dp[i-1][2]-prices[i], dp[i-1][3])
            # 第i天是第二次卖出的状态，有两种情况：
            # 1. 第i天第二次卖出，dp[i][4]=dp[i-1][3]-prices[i]
            # 2. 第i-1天就处于第二次卖出的状态了，直接沿用：dp[i][4]=dp[i-1][4]
            dp[i][4]=max(dp[i-1][3]+prices[i], dp[i-1][4])
        return dp[n-1][4]